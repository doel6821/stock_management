definitions:
  dto.CreateCartRequest:
    properties:
      productId:
        type: integer
      qtty:
        type: integer
    required:
    - productId
    - qtty
    type: object
  dto.CreateProductRequest:
    properties:
      detail:
        type: string
      name:
        type: string
      price:
        type: integer
    required:
    - detail
    - name
    - price
    type: object
  dto.CreatePurchaseRequest:
    properties:
      productId:
        type: string
      qtty:
        type: integer
    required:
    - productId
    - qtty
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UpdateProductRequest:
    properties:
      detail:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
    required:
    - detail
    - name
    - price
    type: object
  dto.UpdatePurchaseRequest:
    properties:
      id:
        type: integer
      receive:
        description: ProductId string `json:"productId" binding:"required"`
        type: integer
    required:
    - receive
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      operationId: Login
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register
      operationId: Register
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register
  /api/cart:
    post:
      consumes:
      - application/json
      description: Create Cart
      operationId: Create Cart
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create Cart
  /api/cart/{id}:
    get:
      consumes:
      - application/json
      description: Find Cart By ID
      operationId: Find Cart By ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the Cart to be find
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Find Cart By ID
  /api/cart/all:
    get:
      consumes:
      - application/json
      description: Get All Cart
      operationId: Get All Cart
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get All Cart by UserId
  /api/history/{productId}:
    get:
      consumes:
      - application/json
      description: Find History By Product ID
      operationId: Find History By Product ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the product to be find
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Find History By Product ID
  /api/product:
    post:
      consumes:
      - application/json
      description: Create Product
      operationId: Create Product
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create Product
  /api/product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product By ID
      operationId: Delete Product By ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the product to be delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete Product By ID
    get:
      consumes:
      - application/json
      description: Find Product By ID
      operationId: Find Product By ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the product to be find
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Find Product By ID
    put:
      consumes:
      - application/json
      description: Update Product By ID
      operationId: Update Product By ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the product to be updated
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update Product By ID
  /api/product/all:
    get:
      consumes:
      - application/json
      description: Get All Product
      operationId: Get All Product
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get All Product
  /api/purchase:
    post:
      consumes:
      - application/json
      description: Create Purchase
      operationId: Create Purchase
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create Purchse
  /api/purchase/{id}:
    get:
      consumes:
      - application/json
      description: Find Purchase By ID
      operationId: Find Purchase By ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the purchase to be find
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Find Purchase By ID
    put:
      consumes:
      - application/json
      description: Update Purchase By ID
      operationId: Update Purchase By ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the purchase to be updated
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update Purchase By ID
  /api/purchase/all:
    get:
      consumes:
      - application/json
      description: Get All Purchase by User Id
      operationId: Get All Purchase
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get All Purchase by User Id
swagger: "2.0"
